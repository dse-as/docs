<?xml version="1.0" encoding="UTF-8"?>
<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
  xmlns="http://www.tei-c.org/ns/1.0"
  exclude-result-prefixes="#all"
  expand-text="true"
  version="3.0">
  <xd:doc scope="stylesheet">
    <xd:desc>
      <xd:p><xd:b>Created on:</xd:b> Jan 25, 2025</xd:p>
      <xd:p><xd:b>Author:</xd:b> pd</xd:p>
      <xd:p></xd:p>
    </xd:desc>
  </xd:doc>
  
  <xsl:template name="xsl:initial-template">
    
    <!-- extract markdown from html page and store as .md -->
    <xsl:for-each select="uri-collection('_fetched/?select=*.xhtml')">
      <xsl:variable name="filename" select=".=>replace('.*/(.*?)\.xhtml','$1')"/>
      <xsl:result-document href="src/_fetched/{$filename}.md" method="text" encoding="UTF-8">
        <xsl:sequence select="doc(.)//*:div[contains-token(@class,'markdown-body')]/text() => replace('https://hackmd.io/_uploads/',$filename||'/')"/>
      </xsl:result-document>
    </xsl:for-each>
    
    <!-- gather image urls and set output paths -->
    <xsl:result-document href="hackmd-backup/_fetched/img-urls.txt" method="text" encoding="UTF-8">
      <xsl:for-each select="uri-collection('_fetched/?select=*.xhtml')">
        <xsl:variable name="filename" select=".=>replace('.*/(.*?)\.xhtml','$1')"/>
        <xsl:analyze-string select="doc(.)//*:div[contains-token(@class,'markdown-body')]/text()" 
          regex="\[.*\]\(http.*_uploads/(.*?\.(png|jpe?g))\)">
          <xsl:matching-substring>
            <xsl:text>url = https://hackmd.io/_uploads/{regex-group(1)}&#xA;</xsl:text>
            <xsl:text>output = src/_fetched/{$filename}/{regex-group(1)}&#xA;</xsl:text>
            <xsl:text>&#xA;</xsl:text>
          </xsl:matching-substring>
        </xsl:analyze-string>
      </xsl:for-each>      
    </xsl:result-document>
    
    <xsl:result-document href="hackmd-backup/.commit-message.txt" method="text" encoding="UTF-8">
      <xsl:text>hackmd dump {current-date()}, {current-time() => format-time('[H]:[m]')}&#xA;&#xA;</xsl:text>
      <xsl:text>generated by Tagsoup and {system-property('xsl:product-name'), system-property('xsl:product-version')} using XSLT {system-property('xsl:version')} / XPath {system-property('xsl:xpath-version')}</xsl:text>
    </xsl:result-document>

  </xsl:template>
  
</xsl:transform>